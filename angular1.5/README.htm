<!DOCTYPE html>
<html>
	<head>
		<title>Antonio's Cats Home - Angular 1.5 implementation</title>

		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width" />

		<style>
			html {
				padding: 30px 0 50px;
				font-family: sans-serif;
				background: #eee;
				color: #222;
			}
			h2 {
				margin-bottom: 0;
			}
			li {
				margin-bottom: 5px;
			}
			code {
				padding: 2px 5px;
				display: inline-block;
				background: #ddd;
			}
			table {
				margin: 30px 0;
				font-size: 0.6em;
			}
			thead {
				background-color: lightgray;
			}
			td {
				padding: 5px;
			}
			img {
				max-width: 100%;
				margin: 20px auto;
				display: block;
				border: none;
			}
			.main {
				width: 70%;
				margin: 0 auto;
			}
			.b {
				font-weight: bold;
			}
			.i {
				font-style: italic;
			}
			.screenshotContainer {
				text-align: center;
			}
			.screenshotLink {
				margin: 50px auto;
				display: inline-block;
			}
			.screenshot {
				max-height: 800px;
				margin: 0;
				box-shadow: 4px 4px 15px rgba(0, 0, 0, 0.2);
			}
			.separator {
				width: 70%;
				margin: 60px auto 80px;
				border-bottom: 2px solid lightgray;
			}
		</style>

	</head>

	<body>

		<div class="main">
			<h1>Antonio's Cats Home - AngularJS 1.6 implementation</h1>
			<p class="p">
				Hi,
			</p>
			<p class="p">
				This is the <strong>AngularJS</strong> implementation for Antonio's Cats Home. The project is configured with <strong>npm</strong> and <strong>Gulp</strong>.
			</p>
			<table>
				<thead>
					<tr>
						<td>JS (Kb minified)</td>
						<td>CSS (Kb minified)</td>
						<td>JS imports</td>
						<td>CSS imports</td>
						<td>Front-end framework</td>
						<td>HTTP requests</td>
						<td>Routing</td>
						<td>Transitions</td>
						<td>Other libraries</td>
						<td>CSS framework</td>
						<td>Building tools</td>
						<td>Linting</td>
						<td>Tests</td>
						<td>Server-side rendering</td>
						<td>Server</td>
						<td>Readme file</td>
						<td>Ready out of the box</td>
					</tr>
				</thead>
				<tr>
					<td>222</td>
					<td>5</td>
					<td>1</td>
					<td>1 (plus fonts)</td>
					<td>AngularJS 1.6 (directive)</td>
					<td><a href="https://docs.angularjs.org/api/ng/service/$http" target="_blank">$http</a></td>
					<td><a href="https://www.npmjs.com/package/angular-ui-router" target="_blank">UI-Router</a></td>
					<td><a href="https://docs.angularjs.org/api/ngAnimate" target="_blank">ngAnimate</a></td>
					<td>-</td>
					<td><a href="https://www.npmjs.com/package/less" target="_blank">Less</a> using <a href="http://getbem.com/naming" target="_blank">BEM</a></td>
					<td>npm, Gulp</td>
					<td><a href="https://www.npmjs.com/package/gulp-jshint" target="_blank">JSHint</a>, <a href="https://www.npmjs.com/package/gulp-htmllint" target="_blank">HTMLLint</a> and <a href="https://www.npmjs.com/package/lesshint" target="_blank">lesshint</a></td>
					<td>Jasmine and Karma on PhantomJS</td>
					<td>No</td>
					<td>Node.js</td>
					<td>In HTML</td>
					<td>On <code>dist</code> folder</td>
				</tr>
			</table>
			<p class="p">
				CSS code is written using the <strong>BEM</strong> pattern and <strong>LESS</strong>.
			</p>
			<p class="p">
				<strong>UI-Router</strong> is used to implement routing between tabs. Every of the two tabs can be accessed straightaway from its URL.
			</p>
			<p class="p">
				You do not need to run any npm command or Gulp task since all the processed files are already generated in the <code>dist</code> folder.
			</p>
			<div class="screenshotContainer">
				<a class="screenshotLink" href="https://antonioredondo.github.io/AntoniosCatsHome/angular1.5/dist">
					<img src="https://github.com/AntonioRedondo/AntoniosCatsHome/raw/master/readmeImages/final.png" class="screenshot">
				</a>
			</div>
			<p class="p">
				In order to see the project working:
			</p>
			<ul>
				<li>
					You can visit <a href="https://antonioredondo.github.io/AntoniosCatsHome/angular1.5/dist">https://antonioredondo.github.io/AntoniosCatsHome/angular1.5/dist</a>.
				</li>
				<li>
					Or you can download the repository and with a browser supporting the <code>file:///</code> standard with <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank">CORS</a> (like Firefox) open <a href="dist/index.htm"><code>dist/index.htm</code></a>.
				</li>
				<li>
					Or you can download the repository and run <code>npm i && npm start</code>. A Node.js server will start and the system default browser will open automatically at <a href="http://localhost:3000/dist/index.htm">http://localhost:3000/dist/index.htm</a>.
				</li>
			</ul>
			<h2>
				Dependencies
			</h2>
			<p class="p">
				JavaScript dependencies are core Angular 1.5, ngAnimate 1.5 and UI-Router 0.3. No jQuery, no Bootstrap. Internet Explorer 8 and below is not supported. No real need for polyfills like Webshim, or browser compatibility libraries like Modernizr. The Angular dependency is stored on the <code>node_modules</code> folder and concated with the rest of project JavaScript code at building time.
			</p>
			<p class="p">
				The only CSS dependency are the fonts downloaded from Google Fonts.
			</p>
			<p class="p">
				Due to the small JavaScript and CSS footprint the page loads fast: 5 KB of CSS and 222 KB of JavaScript (which 99% of this JS is the Angular library). See the below screenshot of Firefox Developer Tools showing the <strong>minimised</strong> version of the project (built with the <code>gulp min</code> configured task).
				
				<img src="sizeAngular.png">
			</p>
			<h2>
				Best practices
			</h2>
			<p class="p">
				Strict practices and habits are paramount for good software development. For this project the <a href="https://github.com/johnpapa/angular-styleguide" target="_blank">Angular Style Guide</a> is followed. TDD was applied to build the project (see Testing section).
			</p>
			<h2>
				Testing
			</h2>
			<p class="p">
				To run the tests execute <code>npm test</code> (you must have executed <code>npm i</code> before). Tests are executed with Karma and PhantomJS and have been written using Jasmine. <code>npm run-script testautowatch</code> executes Karma on <code>autoWatch</code> mode, executing the tests whenever one JavaScript files changes. Ideal for TDD.
			</p>
			<p class="p">
				The project includes a <code>.spec.js</code> file which tests the <code>$achQueries</code> Angular factory. Since the folder structure is arranged <a href="http://stackoverflow.com/a/18542354/372899" target="_blank">by component and not by type</a> there is no <code>tests</code> folder, <code>.spec.js</code> test files are next to the code they test.
			</p>
			<p class="p">
				The project has also configured and working the <code>gulp lint</code> task for linting which makes use of three packages: <a href="https://www.npmjs.com/package/gulp-jshint" target="_blank"><code>gulp-jshint</code></a> to lint JavaScript, <a href="https://www.npmjs.com/package/gulp-htmllint" target="_blank"><code>gulp-htmllint</code></a> to lint HTML and <a href="https://www.npmjs.com/package/gulp-lesshint" target="_blank"><code>gulp-lesshint</code></a> to lint CSS. The <code>gulp lint</code> task is added to the default <code>gulp</code> task together with the <code>gulp build</code> task.
			</p>
			<h2>
				Command tools
			</h2>
			<p class="p">
				There are several npm scripts configured dealing with project tasks. The project makes uses of Gulp but it's not necessary to have it installed globally since Gulp tasks are mapped to npm scripts which call Gulp from the <code>node_modules</code> folder:
			</p>
			<p class="p">
				Available npm scripts:
			</p>
			<ul>
				<li>
					<code>npm i</code> (alias for <code>npm install</code>): installs all dependencies so that the project can be developed, tested and deployed. You must execute <code>npm i</code> before executing any other npm command or Gulp task.
				</li>
				<li>
					<code>npm run clean</code>: removes the <code>dist</code> folder with all its content.
				</li>
				<li>
					<code>npm run lint</code>: lints JavaScript and CSS code.
				</li>
				<li>
					<code>npm run build</code>: generates the usable web in the <code>dist</code> folder.
				</li>
				<li>
					<code>npm run build:watch</code>: executes the <code>default</code> task every time a file from the <code>src</code> folder is modified. This is the script you should run most of the time when developing together with the script <code>npm start</code>.
				</li>
				<li>
					<code>npm run build:prod</code>: generates the usable web in the <code>dist</code> folder by minimising the JavaScript, HTML and CSS code, removing dev code and inlining JavaScript, CSS and SVGs files. This script execute the <coded>npm run build</coded> script first.
				</li>
				<li>
					<code>npm t</code> (alias for <code>npm test</code>): executes <code>.test.jsx</code> tests.
				</li>
				<li>
					<code>npm run test:watch</code>: runs tests in watch mode.
				</li>
				<li>
					<code>npm start</code>: initiates a Node.js server configured on <code>server.js</code> and automatically opens the default browser with the project page.
				</li>
			</ul>
			<h2>
				Folder structure
			</h2>
			<p class="p">
				Source code and distributable built code are stored in different folders (<code>src</code> and <code>dist</code> folders). Angular code is arranged <a href="http://stackoverflow.com/a/18542354/372899" target="_blank">by component rather than by type</a>. The two Angular components on the project are the <code>achQueries</code> factory and the <code>cardList</code> directive. On the project directives are modular, their folder contains all the JS, CSS and HTML code to be rendered. There is no <code>tests</code> folder, <code>.spec.js</code> test files are next to the code they test.
			</p>
			<h2>
				Screen sizes
			</h2>
			<p class="p">
				The page has two different layouts: one desktop view with a max-width of 1100px, and a mobile view.
			</p>
			<h2>
				Browser compatibility
			</h2>
			<p class="p">
				The page works on Internet Explorer 9 and above and rest of modern browsers. However, Internet Explorer 9 does not support round borders nor CSS transitions (and hence animations will not be shown). I have not had the chance to try it on Safari.
			</p>
			<p class="p separator">.
			</p>
			<p class="p">
				I hope I have explained my approach properly. For sure you have many other doubts that you will like to solve. I am very happy to discuss them with you.
			</p>
			<p class="p">
				On the project, when you see something weird or wrong I would like to please ask you not to automatically consider that part wrong. There will be a satisfactory explanation so that that code or approach has a reason to exist in peace with the rest of best web coding standards and practices.
			</p>
			<p class="p">
				Regards,
			</p>
			<p class="p">
				Antonio
			</p>
		</div>

	</body>
</html>
